@HOST=http://127.0.0.1:8080/api
@ACCOUNT_HOST=http://127.0.0.1:8079/api
@account="user"
@account2="user2"
###

###
# @name Create place without authentication. No need to have body
POST {{HOST}}/places

> {%
  client.test("Unauthorized request", function () {
    client.assert(response.status === 401, "Response status is not 401");
  });
%}

###
# @name Login with existing user to manipulate with places
POST {{ACCOUNT_HOST}}/account/login
Content-Type: application/json

{
  "username": {{account}},
  "password": "pass"
}

> {%
  client.global.set("auth-bearer-token", null);
  client.test("User login successfully", function () {
    client.assert(response.status === 200, "Response status is not 200");
    const token = response.body;
    client.global.set("auth-bearer-token", token);
  });
%}

###
# @name Create place.
POST {{HOST}}/places
Content-Type: application/json
Authorization: Bearer {{auth-bearer-token}}

{
  "name": "PlaceName",
  "country": "Poland",
  "address": "rondo ONZ"
}

> {%
  client.test("Place created", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
  client.test("Received expected response", function () {
    client.assert(response.body, "Unexpected response body");
    const sourceKeys = Object.keys(response.body);
    client.assert(
      sourceKeys.includes("id") && sourceKeys.includes("name"),
      "Not enough of fields");
  });
%}

###
# @name Get existing place
GET {{HOST}}/places/1
#Content-Type: application/json
Authorization: Bearer {{auth-bearer-token}}

> {%
  client.test("Place exists", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
  client.test("Received expected response", function () {
    client.assert(response.body, "Unexpected response body");
    const sourceKeys = Object.keys(response.body);
    client.assert(
      sourceKeys.includes("id") && sourceKeys.includes("name"),
      "Not enough of fields");
  });
%}

###
# @name Get unexisting place
GET {{HOST}}/places/1000
#Content-Type: application/json
Authorization: Bearer {{auth-bearer-token}}

> {%
  client.test("PLace doesn't exists", function () {
    client.assert(response.status === 404, "Response status is not 404");
  });
%}

###
# @name Rename of unexisting place
PATCH {{HOST}}/places/1000
Content-Type: application/json
Authorization: Bearer {{auth-bearer-token}}

{
  "name": "Any"
}

> {%
  client.test("PLace doesn't exists", function () {
    client.assert(response.status === 404, "Response status is not 404");
  });
%}

###
# @name Place rename
PATCH {{HOST}}/places/1
Content-Type: application/json
Authorization: Bearer {{auth-bearer-token}}

{
  "name": "Roundabout ONZ in Warsaw"
}

> {%
  client.test("Place updated", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
  client.test("Received expected response", function () {
    client.assert(response.body, "Unexpected response body");
    client.assert(response.body.name === "Roundabout ONZ in Warsaw", "Name was updated");
  });
%}

###
# @name Add position to place
PATCH {{HOST}}/places/1
Content-Type: application/json
Authorization: Bearer {{auth-bearer-token}}

{
  "latitude": 52.233215,
  "longitude": 20.998458
}

> {%
  client.test("Place updated", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
  client.test("Received expected response", function () {
    client.assert(response.body, "Unexpected response body");
    client.assert(response.body.latitude === 52.233215, "Latitude was updated");
    client.assert(response.body.longitude === 20.998458, "Longitude was updated");
  });
%}

###
# @name Create trip in future
POST {{HOST}}/trips
Content-Type: application/json
Authorization: Bearer {{auth-bearer-token}}

{
  "date": "01/02/2025",
  "placeId": 1,
  "companions": ["mike@gmail.com"]
}

> {%
  client.test("Trip created", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
  client.test("Received expected response", function () {
    client.assert(response.body, "Unexpected response body");
    const tripIdInFuture = response.body.id;
    client.global.set("trip-id-in-future", tripIdInFuture);
  });
%}


###
# @name Create trip in past
POST {{HOST}}/trips
Content-Type: application/json
Authorization: Bearer {{auth-bearer-token}}

{
  "date": "01/02/2024",
  "placeId": 2
}

> {%
  client.test("Trip created", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
  client.test("Received expected response", function () {
    client.assert(response.body, "Unexpected response body");
    const tripIdFromPast = response.body.id;
    client.global.set("trip-id-from-past", tripIdFromPast);
  });
%}


###
# @name Create new trip with new place
POST {{HOST}}/trips
Content-Type: application/json
Authorization: Bearer {{auth-bearer-token}}

{
  "date": "01/12/2024",
  "place": {
    "name": "rondo DaszyÅ„skiego",
    "country": "Poland",
    "address": "rondo DaszyÅ„skiego"
  }
}

###
# @name Login with existing user2 to manipulate with trips
POST {{ACCOUNT_HOST}}/account/login
Content-Type: application/json

{
  "username": {{account2}},
  "password": "pass"
}

> {%
  client.global.set("auth-bearer-token", null);
  client.test("User login successfully", function () {
    client.assert(response.status === 200, "Response status is not 200");
    const token = response.body;
    client.global.set("auth-bearer-token", token);
  });
%}

###
# @name Attempt to delete trip of another user
DELETE {{HOST}}/trips/{{trip-id-in-future}}
Content-Type: application/json
Authorization: Bearer {{auth-bearer-token}}

> {%
  client.test("Unauthorized request", function () {
    client.assert(response.status === 401, "Response status is not 401");
  });
%}

###
# @name Login with main user to manipulate with trips
POST {{ACCOUNT_HOST}}/account/login
Content-Type: application/json

{
  "username": {{account}},
  "password": "pass"
}

> {%
  client.global.set("auth-bearer-token", null);
  client.test("User login successfully", function () {
    client.assert(response.status === 200, "Response status is not 200");
    const token = response.body;
    client.global.set("auth-bearer-token", token);
  });
%}


###
# @name Attempt to delete past trip
DELETE {{HOST}}/trips/{{trip-id-from-past}}
Content-Type: application/json
Authorization: Bearer {{auth-bearer-token}}

> {%
  client.test("Unauthorized request", function () {
    client.assert(response.status === 401, "Response status is not 401");
  });
%}


###
# @name Delete trip from future
DELETE {{HOST}}/trips/{{trip-id-in-future}}
Content-Type: application/json
Authorization: Bearer {{auth-bearer-token}}

> {%
  client.test("Trip deleted", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}