@HOST=http://127.0.0.1:8080/api
###
# @name Login without body
POST {{HOST}}/account/login

> {%
  client.test("Request without body should be denied and return 400", function () {
    client.assert(response.status === 400, "Response status is not 400");
  });
%}

###
# @name Login with empty username
POST {{HOST}}/account/login
Content-Type: application/json

{
  "username": "",
  "password": "pass"
}

> {%
  client.test("Invalid username field", function () {
    client.assert(response.status === 400, "Response status is not 400");
  });
%}

###
# @name Login with empty password
POST {{HOST}}/account/login
Content-Type: application/json

{
  "username": "user",
  "password": ""
}

> {%
  client.test("Invalid password field", function () {
    client.assert(response.status === 400, "Response status is not 400");
  });
%}

###
# @name Login before user creation
POST {{HOST}}/account/login
Content-Type: application/json

{
  "username": "user",
  "password": "pass"
}

> {%
  client.test("No users exists", function () {
    client.assert(response.status === 403, "Response status is not 403");
  });
%}

###
# @name Create new account
POST {{HOST}}/account/create
Content-Type: application/json

{
  "username": "user",
  "password": "pass"
}

###
# @name Login with existing user
POST {{HOST}}/account/login
Content-Type: application/json

{
  "username": "user",
  "password": "pass"
}

> {%
  client.global.set("auth-bearer-token", null);
  client.test("User login successfully", function () {
    client.assert(response.status === 200, "Response status is not 200");
    const token = response.body;
    client.global.set("auth-bearer-token", token);
  });
%}


###
# @name Test unauthenticated
GET {{HOST}}/test

> {%
  client.test("Unauthorized request", function () {
    client.assert(response.status === 401, "Response status is not 401");
  });
%}


###
# @name Test authenticated
GET {{HOST}}/test
Authorization: Bearer {{auth-bearer-token}}

> {%
  client.test("Authorized request", function () {
    client.assert(response.status === 200, "Response status is not 200");
  });
  client.test("Received expected response", function () {
    client.assert(response.body === 'You are authenticated', "Unexpected response body");
  });
%}


###
# @name Get current principal info
GET {{HOST}}/principal
Authorization: Bearer {{auth-bearer-token}}


###
# @name Logout current user
GET {{HOST}}/logout

> {%
  client.test("User logout successfully", function () {
    client.assert(response.status === 200, "Response status is not 200");
    client.global.set("auth-bearer-token", null);
  });
%}


###
# @name Attempt to get principal info but not authenticated (should be no session data)
GET {{HOST}}/principal

> {%
  client.test("Unauthorized request", function () {
    client.assert(response.status === 401, "Response status is not 401");
  });
%}
