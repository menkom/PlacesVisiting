version: '3.9'

services:

  nginx:
    container_name: pv-nginx
    image: nginx:stable-alpine3.19-slim
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:8080"

  db-places-visiting:
    image: postgres:16.2-alpine
    container_name: pv-postgres162
    environment:
      - POSTGRES_USER=${DATASOURCE_USER}
      - POSTGRES_PASSWORD=${DATASOURCE_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=${ACCOUNT_DATABASE_NAME},${USER_DATABASE_NAME},${IMAGE_DATABASE_NAME}
    ports:
      - '5432:5432'
    volumes:
      - pv-postgres:/var/lib/postgresql/data
      - ./create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${DATASOURCE_USER} -d ${USER_DATABASE_NAME}'"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq3-management
    hostname: rabbitmq                        # hostname will be used by RabbitMQ to name the server instance.
    restart: on-failure
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
      #  disk_free_limit=Disk space - low watermark
      #  log_levels=logging level for different operations
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,error}] disk_free_limit 102483648 -rabbitmq_management load_definitions "/run/secrets/rabbit_config"
    secrets:
      - rabbit_config
    ports:
      - "5672:5672"
      - '15672:15672' # management
    #      - '61613:61613' # stomp
    volumes:
      - rabbitmq:/var/lib/rabbitmq
      - ./rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins

  mock-notification-consumer:
    container_name: mock-notification-consumer
    build:
      context: ../mock-notification-consumer/
      dockerfile: ./Dockerfile
    environment:
      - RABBIT_HOST=${RABBIT_HOST}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
    depends_on:
      - rabbitmq

  auth-service:
    container_name: auth-service
    build:
      context: ../auth-service/
      dockerfile: ./Dockerfile
    ports:
      - "8079:8079"
    environment:
      - DATASOURCE_URL=${DATASOURCE_URL}${ACCOUNT_DATABASE_NAME}
      - DATASOURCE_USER=${DATASOURCE_USER}
      - DATASOURCE_PASSWORD=${DATASOURCE_PASSWORD}
      - SPRING_SECURITY_USER_PASSWORD=${SPRING_SECURITY_USER_PASSWORD_DEFAULT}
      - GOOGLE_OAUTH_CLIENT_ID=${GOOGLE_OAUTH_CLIENT_ID}
      - GOOGLE_OAUTH_CLIENT_SECRET=${GOOGLE_OAUTH_CLIENT_SECRET}
      - ACCOUNT_DATABASE_NAME=${ACCOUNT_DATABASE_NAME}
      - JWT_SHARED_KEY=${JWT_SHARED_KEY}
      - AUTH_INTERNAL_TOKEN=${AUTH_INTERNAL_TOKEN}
    healthcheck:
      test: "wget -T5 -qO- http://localhost:8079/api/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      db-places-visiting:
        condition: service_healthy

  email-service:
    container_name: email-service
    build:
      context: ../email-service/
      dockerfile: ./Dockerfile
    environment:
      - RABBIT_HOST=${RABBIT_HOST}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - GMAIL_USER_NAME=${GMAIL_USER_NAME}
      - GMAIL_TOKEN=${GMAIL_TOKEN}
    depends_on:
      - rabbitmq

  places-visiting-api:
    container_name: places-visiting-api
    build:
      context: ../user-service-api/
      dockerfile: ./Dockerfile
    ports:
      - "8080:8080"
    environment:
      - DATASOURCE_URL=${DATASOURCE_URL}${USER_DATABASE_NAME}
      - DATASOURCE_USER=${DATASOURCE_USER}
      - DATASOURCE_PASSWORD=${DATASOURCE_PASSWORD}
      - SPRING_SECURITY_USER_PASSWORD=${SPRING_SECURITY_USER_PASSWORD_DEFAULT}
      - GOOGLE_OAUTH_CLIENT_ID=${GOOGLE_OAUTH_CLIENT_ID}
      - GOOGLE_OAUTH_CLIENT_SECRET=${GOOGLE_OAUTH_CLIENT_SECRET}
    depends_on:
      db-places-visiting:
        condition: service_healthy

  minio-storage:
    image: minio/minio:RELEASE.2024-06-13T22-53-53Z
    container_name: minio-storage
    restart: unless-stopped
    command: server --console-address ":9001" /data/
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio-storage:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
#      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"] curl is not included anymore in base image
      interval: 30s
      timeout: 20s
      retries: 3

  minio-default-buckets-create-service:
    image: minio/mc:RELEASE.2024-06-12T14-34-03Z
    container_name: minio-default-buckets-create-service
    restart: on-failure
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET}
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minioAlias http://minio-storage:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb minioAlias/${MINIO_BUCKET};
      /usr/bin/mc policy set public minioAlias/${MINIO_BUCKET};
      "
    depends_on:
      minio-storage:
        condition: service_healthy

  image-service:
    container_name: image-service
    build:
      context: ../image-service-api/
      dockerfile: ./Dockerfile
    ports:
      - "8082:8082"
    environment:
      - DATASOURCE_URL=${DATASOURCE_URL}${IMAGE_DATABASE_NAME}
      - DATASOURCE_USER=${DATASOURCE_USER}
      - DATASOURCE_PASSWORD=${DATASOURCE_PASSWORD}
      - SPRING_SECURITY_USER_PASSWORD=${SPRING_SECURITY_USER_PASSWORD_DEFAULT}
      - S3_ACCESS_KEY=${MINIO_ROOT_USER}
      - S3_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - S3_BUCKET=${MINIO_BUCKET}
      - JWT_SHARED_KEY=${JWT_SHARED_KEY}
      - AUTH_INTERNAL_URL=${AUTH_INTERNAL_URL}
      - AUTH_INTERNAL_TOKEN=${AUTH_INTERNAL_TOKEN}
    healthcheck:
      test: "wget -T5 -qO- http://localhost:8082/api/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      auth-service:
        condition: service_healthy
      db-places-visiting:
        condition: service_healthy
      minio-storage:
        condition: service_healthy

volumes:
  pv-postgres:
  rabbitmq:
  minio-storage:

secrets:
  rabbit_config:
    file: ./rabbitmq/rabbit_definitions.json #import of predefined settings